// Autogenerated from "./IntersectingEllipses.glsl"

import * as PIXI from "pixi.js";
import {vertex} from "./vertex";


interface Uniforms
{
  intersectingEllipseCenter: number[];
  intersectingEllipseSharpness: number;
  intersectingEllipseSize: number[];
  mainAlpha: number;
  mainColor: number[];
  mainEllipseSharpness: number;
  mainEllipseSize: number[];
}

export class IntersectingEllipses extends PIXI.Shader<Uniforms>
{
  constructor(initialUniformValues?: Partial<Uniforms>)
  {
    const program = new PIXI.Program(
      vertex,
      fragmentSource,
      "IntersectingEllipses",
    );

    super(program, initialUniformValues);
  }

  public setUniforms(uniforms: Partial<Uniforms>): void
  {
    for (const key in uniforms)
    {
      this.uniforms[key] = uniforms[key];
    }
  }
}

const fragmentSource = `precision mediump float;

varying vec2 vTextureCoord;
uniform sampler2D uSampler;

uniform vec4 mainColor;
uniform float mainAlpha;

uniform vec2 intersectingEllipseCenter;
uniform vec2 intersectingEllipseSize;
uniform float intersectingEllipseSharpness;

uniform vec2 mainEllipseSize;
uniform float mainEllipseSharpness;


float ellipseGradient(vec2 p, vec2 ellipseCenter, vec2 ellipseSize)
{
  vec2 q = p - ellipseCenter;
  q /= ellipseSize;

  float dist = length(q);

  return dist;
}

void main()
{
  vec2 uv = vTextureCoord;
  vec4 color = texture2D(uSampler, vTextureCoord);

  vec2 q = -1.0 + 2.0 * uv;

  float mainDist = 1.0 - ellipseGradient(q, vec2(0.0, 0.0), mainEllipseSize);
  float mainGradient = smoothstep(0.0, 1.0 - mainEllipseSharpness, mainDist);
  color += mainColor * mainGradient;


  float intersectingDist = ellipseGradient(q, intersectingEllipseCenter, intersectingEllipseSize);

  float intersectingMask = step(intersectingEllipseSharpness, intersectingDist);
  color *= intersectingMask;

  float intersectingGradient = smoothstep(intersectingEllipseSharpness, 1.0, intersectingDist);
  color *=  intersectingGradient;

  gl_FragColor = color * mainAlpha;
}
`;

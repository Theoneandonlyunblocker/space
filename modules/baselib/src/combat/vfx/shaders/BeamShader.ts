// Autogenerated from "./Beam.glsl"

import * as PIXI from "pixi.js";
import {vertex} from "./vertex";


interface Uniforms
{
  aspectRatio: number;
  beamColor: number[];
  beamYPosition: number;
  bulgeIntensity: number;
  bulgeSharpness: number;
  bulgeSize: number[];
  bulgeXPosition: number;
  lineIntensity: number;
  lineXSharpness: number;
  lineXSize: number[];
  lineYSharpness: number;
  lineYSize: number;
  noiseAmplitude: number;
  seed: number;
  time: number;
  uSampler: PIXI.Texture;
}

export class BeamShader extends PIXI.Shader<Uniforms>
{
  constructor(initialUniformValues?: Partial<Uniforms>)
  {
    const program = new PIXI.Program(
      vertex,
      fragmentSource,
      "Beam",
    );

    super(program, initialUniformValues);
  }

  public setUniforms(uniforms: Partial<Uniforms>): void
  {
    for (const key in uniforms)
    {
      this.uniforms[key] = uniforms[key];
    }
  }
}

const fragmentSource = `/// tsBuildTargets: shader

precision mediump float;

varying vec2 vTextureCoord;
uniform sampler2D uSampler;

uniform float time;
uniform float seed;
uniform float noiseAmplitude;

uniform float aspectRatio;

uniform vec4 beamColor;
uniform float beamYPosition;

uniform float lineIntensity;
uniform float bulgeIntensity;

uniform float bulgeXPosition;
uniform vec2 bulgeSize;
uniform float bulgeSharpness;

uniform vec2 lineXSize;
uniform float lineXSharpness;

uniform float lineYSize;
uniform float lineYSharpness;

float hash(vec2 p)
{
  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));
}

float noise(vec2 x)
{
  vec2 i = floor(x);
  vec2 f = fract(x);
  float a = hash(i);
  float b = hash(i + vec2(1.0, 0.0));
  float c = hash(i + vec2(0.0, 1.0));
  float d = hash(i + vec2(1.0, 1.0));
  vec2 u = f * f * (3.0 - 2.0 * f);
  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

float ellipseGradient(vec2 p, float ellipseXPosition, vec2 ellipseSize)
{
  vec2 q = vec2(-1.0 + 2.0 * p.x, p.y); // (-1, -1) -> (1, 1)
  q.x -= -1.0 + 2.0 * ellipseXPosition;
  q.x *= aspectRatio;
  q /= ellipseSize;

  float dist = length(q);

  return dist;
}

void main()
{
  vec2 uv = vTextureCoord;
  vec4 color = texture2D(uSampler, vTextureCoord);

  vec2 q = vec2(uv.x, (uv.y - beamYPosition) * 2.0);
  float noiseValue = -1.0 + 2.0 * noise(vec2(q.x - time, seed));
  noiseValue *= noiseAmplitude;

  float yDistFromCenter = abs(q.y);
  float insideLineY = step(yDistFromCenter, lineYSize);
  float lineYDistanceFromEdge = distance(yDistFromCenter, lineYSize);
  float lineYGradient = smoothstep(0.0, 1.0 - lineYSharpness, lineYDistanceFromEdge) * insideLineY;

  float insideLineX = step(lineXSize.x, q.x) * step(q.x, lineXSize.y);
  float lineXDist = 1.0 - min(distance(q.x, lineXSize.x), distance(q.x, lineXSize.y));
  lineXDist = max(insideLineX, lineXDist);

  float lineXGradient = smoothstep(lineXSharpness, 1.0, lineXDist);

  float lineGradient = (lineYGradient * lineXGradient) * lineIntensity;
  lineGradient *= 1.0 + noiseValue;

  float bulgeGradient = 1.0 - ellipseGradient(q, bulgeXPosition, bulgeSize);
  bulgeGradient = smoothstep(0.0, 1.0 - bulgeSharpness, bulgeGradient) * bulgeIntensity;
  bulgeGradient *= 1.0 + noiseValue * 0.5;

  float beamGradient = lineGradient + bulgeGradient;
  color += beamGradient * beamColor;

  gl_FragColor = color;
}
`;
